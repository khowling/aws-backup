{
  "name": "aws4",
  "version": "0.1.10",
  "description": "Signs and prepares requests using AWS Signature Version 4",
  "author": {
    "name": "Michael Hart",
    "email": "michael.hart.au@gmail.com",
    "url": "http://github.com/mhart"
  },
  "main": "aws4.js",
  "keywords": [
    "amazon",
    "aws",
    "signature",
    "autoscaling",
    "cloudformation",
    "elasticloadbalancing",
    "elb",
    "elasticbeanstalk",
    "cloudsearch",
    "dynamodb",
    "glacier",
    "sqs",
    "iam",
    "sts",
    "ses",
    "storagegateway",
    "datapipeline",
    "directconnect",
    "redshift",
    "opsworks",
    "rds",
    "monitoring",
    "cloudwatch"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/mhart/aws4.git"
  },
  "license": "MIT",
  "devDependencies": {
    "should": "~1.2.1",
    "mocha": "~1.7.4"
  },
  "scripts": {
    "test": "mocha ./test/fast.js ./test/slow.js -b -t 100s -R list"
  },
  "readme": "aws4\n----\n\n[![Build Status](https://secure.travis-ci.org/mhart/aws4.png?branch=master)](http://travis-ci.org/mhart/aws4)\n\nA small utility to sign vanilla node.js http(s) request options using Amazon's\n[AWS Signature Version 4](http://docs.amazonwebservices.com/general/latest/gr/signature-version-4.html).\n\nThis signature is supported by an increasing number of Amazon services, including\n[SQS](http://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/),\n[IAM](http://docs.aws.amazon.com/IAM/latest/APIReference/),\n[STS](http://docs.aws.amazon.com/STS/latest/APIReference/),\n[DynamoDB](http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/API.html),\n[RDS](http://docs.aws.amazon.com/AmazonRDS/latest/APIReference/),\n[CloudWatch](http://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/),\n[Glacier](http://docs.aws.amazon.com/amazonglacier/latest/dev/amazon-glacier-api.html),\n[CloudSearch](http://docs.aws.amazon.com/cloudsearch/latest/developerguide/APIReq.html),\n[Elastic Load Balancing](http://docs.aws.amazon.com/ElasticLoadBalancing/latest/APIReference/),\n[CloudFormation](http://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/),\n[Elastic Beanstalk](http://docs.aws.amazon.com/elasticbeanstalk/latest/api/),\n[Storage Gateway](http://docs.aws.amazon.com/storagegateway/latest/userguide/AWSStorageGatewayAPI.html),\n[Data Pipeline](http://docs.aws.amazon.com/datapipeline/latest/APIReference/),\n[Direct Connect](http://docs.aws.amazon.com/directconnect/latest/APIReference/),\n[Redshift](http://docs.aws.amazon.com/redshift/latest/APIReference/),\n[OpsWorks](http://docs.aws.amazon.com/opsworks/latest/APIReference/),\n[SES](http://docs.aws.amazon.com/ses/latest/APIReference/) and\n[AutoScaling](http://docs.aws.amazon.com/AutoScaling/latest/APIReference/).\n\nIt also provides defaults for a number of core AWS headers and\nrequest parameters, making it a very easy to query AWS services, or\nbuild out a fully-featured AWS library.\n\nExample\n-------\n\n```javascript\nvar http  = require('http')\n  , https = require('https')\n  , aws4  = require('aws4')\n\n// given an options object you could pass to http.request\nvar opts = { host: 'sqs.us-east-1.amazonaws.com', path: '/?Action=ListQueues' }\n\naws4.sign(opts) // assumes AWS credentials are available in process.env\n\nconsole.log(opts)\n/*\n{\n  host: 'sqs.us-east-1.amazonaws.com',\n  path: '/?Action=ListQueues',\n  headers: {\n    Host: 'sqs.us-east-1.amazonaws.com',\n    'X-Amz-Date': '20121226T061030Z',\n    Authorization: 'AWS4-HMAC-SHA256 Credential=ABCDEF/20121226/us-east-1/sqs/aws4_request, ...'\n  }\n}\n*/\n\n// we can now use this to query AWS using the standard node.js http API\nhttp.request(opts, function(res) { res.pipe(process.stdout) }).end()\n/*\n<?xml version=\"1.0\"?>\n<ListQueuesResponse xmlns=\"http://queue.amazonaws.com/doc/2012-11-05/\">\n...\n*/\n```\n\nMore options\n------------\n\n```javascript\n// you can pass AWS credentials in explicitly\naws4.sign(opts, { accessKeyId: '', secretAccessKey: '' })\n\n// aws4 can infer the host from a service and region\nopts = aws4.sign({ service: 'sqs', region: 'us-east-1', path: '/?Action=ListQueues' })\n\n// create a utility function to pipe to stdout (with https this time)\nfunction request(o) { https.request(o, function(res) { res.pipe(process.stdout) }).end(o.body || '') }\n\n// aws4 can infer the HTTP method if a body is passed in\n// method will be POST and Content-Type: 'application/x-www-form-urlencoded; charset=utf-8'\nrequest(aws4.sign({ service: 'iam', body: 'Action=ListGroups&Version=2010-05-08' }))\n/*\n<ListGroupsResponse xmlns=\"https://iam.amazonaws.com/doc/2010-05-08/\">\n...\n*/\n\n// can specify any custom option or header as per usual\nrequest(aws4.sign({\n  service: 'dynamodb',\n  region: 'ap-southeast-2',\n  method: 'POST',\n  path: '/',\n  headers: {\n    'Content-Type': 'application/x-amz-json-1.0',\n    'X-Amz-Target': 'DynamoDB_20111205.ListTables'\n  },\n  body: '{}'\n}))\n/*\n{\"TableNames\":[]}\n...\n*/\n\n// works with all other services that support Signature Version 4\n\nrequest(aws4.sign({ service: 'sts', path: '/?Action=GetSessionToken&Version=2011-06-15' }))\n/*\n<GetSessionTokenResponse xmlns=\"https://sts.amazonaws.com/doc/2011-06-15/\">\n...\n*/\n\nrequest(aws4.sign({ service: 'glacier', path: '/-/vaults', headers: { 'X-Amz-Glacier-Version': '2012-06-01' } }))\n/*\n{\"Marker\":null,\"VaultList\":[]}\n...\n*/\n\nrequest(aws4.sign({ service: 'cloudsearch', path: '/?Action=DescribeDomains' }))\n/*\n<DescribeDomainsResponse xmlns=\"http://cloudsearch.amazonaws.com/doc/2011-02-01\">\n...\n*/\n\nrequest(aws4.sign({ service: 'ses', path: '/?Action=ListIdentities' }))\n/*\n<ListIdentitiesResponse xmlns=\"http://ses.amazonaws.com/doc/2010-12-01/\">\n...\n*/\n\nrequest(aws4.sign({ service: 'autoscaling', path: '/?Action=DescribeAutoScalingInstances&Version=2011-01-01' }))\n/*\n<DescribeAutoScalingInstancesResponse xmlns=\"http://autoscaling.amazonaws.com/doc/2011-01-01/\">\n...\n*/\n\nrequest(aws4.sign({ service: 'elasticloadbalancing', path: '/?Action=DescribeLoadBalancers&Version=2012-06-01' }))\n/*\n<DescribeLoadBalancersResponse xmlns=\"http://elasticloadbalancing.amazonaws.com/doc/2012-06-01/\">\n...\n*/\n\nrequest(aws4.sign({ service: 'cloudformation', path: '/?Action=ListStacks&Version=2010-05-15' }))\n/*\n<ListStacksResponse xmlns=\"http://cloudformation.amazonaws.com/doc/2010-05-15/\">\n...\n*/\n\nrequest(aws4.sign({ service: 'elasticbeanstalk', path: '/?Action=ListAvailableSolutionStacks&Version=2010-12-01' }))\n/*\n<ListAvailableSolutionStacksResponse xmlns=\"http://elasticbeanstalk.amazonaws.com/docs/2010-12-01/\">\n...\n*/\n\nrequest(aws4.sign({ service: 'rds', path: '/?Action=DescribeDBInstances&Version=2012-09-17' }))\n/*\n<DescribeDBInstancesResponse xmlns=\"http://rds.amazonaws.com/doc/2012-09-17/\">\n...\n*/\n\nrequest(aws4.sign({ service: 'monitoring', path: '/?Action=ListMetrics&Version=2010-08-01' }))\n/*\n<ListMetricsResponse xmlns=\"http://monitoring.amazonaws.com/doc/2010-08-01/\">\n...\n*/\n\nrequest(aws4.sign({ service: 'redshift', path: '/?Action=DescribeClusters&Version=2012-12-01' }))\n/*\n<DescribeClustersResponse xmlns=\"http://redshift.amazonaws.com/doc/2012-12-01/\">\n...\n*/\n\nrequest(aws4.sign({ service: 'storagegateway', body: '{}', headers: {\n  'Content-Type': 'application/x-amz-json-1.1',\n  'X-Amz-Target': 'StorageGateway_20120630.ListGateways'\n}}))\n/*\n{\"Gateways\":[]}\n...\n*/\n\nrequest(aws4.sign({ service: 'datapipeline', body: '{}', headers: {\n  'Content-Type': 'application/x-amz-json-1.1',\n  'X-Amz-Target': 'DataPipeline.ListPipelines'\n}}))\n/*\n{\"hasMoreResults\":false,\"pipelineIdList\":[]}\n...\n*/\n\nrequest(aws4.sign({ service: 'directconnect', body: '{}', headers: {\n  'Content-Type': 'application/x-amz-json-1.1',\n  'X-Amz-Target': 'OvertureService.DescribeConnections'\n}}))\n/*\n{\"connections\":[]}\n...\n*/\n\nrequest(aws4.sign({ service: 'opsworks', body: '{}', headers: {\n  'Content-Type': 'application/x-amz-json-1.1',\n  'X-Amz-Target': 'OpsWorks_20130218.DescribeInstances'\n}}))\n/*\n{\"Instances\":[]}\n...\n*/\n```\n\nAPI\n---\n\n### aws4.sign(requestOptions, [credentials])\n\nThis calculates and populates the `Authorization` header of\n`requestOptions`, and any other necessary AWS headers and/or request\noptions. Returns `requestOptions` as a convenience for chaining.\n\n`requestOptions` is an object holding the same options that the node.js\n[http.request](http://nodejs.org/docs/latest/api/http.html#http_http_request_options_callback)\nfunction takes.\n\nThe following properties of `requestOptions` are used in the signing or\npopulated if they don't already exist:\n\n- `hostname` or `host` (will be determined from `service` and `region` if not given)\n- `method` (will use `'GET'` if not given or `'POST'` if there is a `body`)\n- `path` (will use `'/'` if not given)\n- `body` (will use `''` if not given)\n- `service` (will be calculated from `hostname` or `host` if not given)\n- `region` (will be calculated from `hostname` or `host` or use `'us-east-1'` if not given)\n- `headers['Host']` (will use `hostname` or `host` or be calculated if not given)\n- `headers['Content-Type']` (will use `'application/x-www-form-urlencoded; charset=utf-8'`\n  if not given and there is a `body`)\n- `headers['Date']` (used to calculate the signature date if given, otherwise `new Date` is used)\n\nYour AWS credentials (which can be found in your\n[AWS console](https://portal.aws.amazon.com/gp/aws/securityCredentials))\ncan be specified in one of two ways:\n\n- As the second argument, like this:\n\n```javascript\naws4.sign(requestOptions, {\n  secretAccessKey: \"<your-secret-access-key>\",\n  accessKeyId: \"<your-access-key-id>\"\n})\n```\n\n- From `process.env`, such as this:\n\n```\nexport AWS_SECRET_ACCESS_KEY=\"<your-secret-access-key>\"\nexport AWS_ACCESS_KEY_ID=\"<your-access-key-id>\"\n```\n\n(will also use `AWS_ACCESS_KEY` and `AWS_SECRET_KEY` if available)\n\nInstallation\n------------\n\nWith [npm](http://npmjs.org/) do:\n\n```\nnpm install aws4\n```\n\nThanks\n------\n\nThanks to [@jed](https://github.com/jed) for his\n[dynamo-client](https://github.com/jed/dynamo-client) lib where I first\ncommitted and subsequently extracted this code.\n\nAlso thanks to the\n[official node.js AWS SDK](https://github.com/aws/aws-sdk-js) for giving\nme a start on implementing the v4 signature.\n\n",
  "readmeFilename": "README.md",
  "_id": "aws4@0.1.10",
  "dist": {
    "shasum": "4087e93ea20147b2e18740a110ef719acd1e2ba3"
  },
  "_from": "aws4"
}
